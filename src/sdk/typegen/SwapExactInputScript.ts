/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type SwapExactInputScriptInputs = [amount_in: BigNumberish, asset_in: AssetIdInput, amount_out_min: BigNumberish, pools: Vec<[AssetIdInput, AssetIdInput, boolean]>, recipient: IdentityInput, deadline: BigNumberish];
export type SwapExactInputScriptOutput = Vec<[BN, AssetIdOutput]>;

export type SwapExactInputScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, struct std::asset_id::AssetId)",
      "concreteTypeId": "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)>",
      "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378",
      "metadataTypeId": 11,
      "typeArguments": [
        "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
      ]
    },
    {
      "type": "struct std::vec::Vec<(u64, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "metadataTypeId": 11,
      "typeArguments": [
        "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 9
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "buf",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount_in",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_in",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "amount_out_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "pools",
          "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 17968
    }
  ]
};

const bytecode = decompressBytecode('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');

export class SwapExactInputScript extends Script<SwapExactInputScriptInputs, SwapExactInputScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
