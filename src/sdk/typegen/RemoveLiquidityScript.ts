/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type RemoveLiquidityScriptInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], liquidity: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type RemoveLiquidityScriptOutput = [BN, BN];

export type RemoveLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "liquidity",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 7848
    }
  ]
};

const bytecode = decompressBytecode('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');

export class RemoveLiquidityScript extends Script<RemoveLiquidityScriptInputs, RemoveLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
