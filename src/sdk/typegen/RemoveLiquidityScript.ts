/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type RemoveLiquidityScriptInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], liquidity: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type RemoveLiquidityScriptOutput = [BN, BN];

export type RemoveLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, u64)",
      "concreteTypeId": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "liquidity",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "41bd1a98f0a59642d8f824c805b798a5f268d1f7d05808eb05c4189c493f1be0",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 7664
    }
  ]
};

const bytecode = decompressBytecode('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');

export class RemoveLiquidityScript extends Script<RemoveLiquidityScriptInputs, RemoveLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
