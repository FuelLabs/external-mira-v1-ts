/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type AddLiquidityScriptInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], amount_0_desired: BigNumberish, amount_1_desired: BigNumberish, amount_0_min: BigNumberish, amount_1_min: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type AddLiquidityScriptOutput = AssetOutput;

export type AddLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 3
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 4
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 2
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "bool",
      "metadataTypeId": 2
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "id",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "amount_0_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_0_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_min",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 9496
    }
  ]
};

const bytecode = decompressBytecode('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');

export class AddLiquidityScript extends Script<AddLiquidityScriptInputs, AddLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
