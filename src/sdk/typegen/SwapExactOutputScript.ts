/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type SwapExactOutputScriptInputs = [amount_out: BigNumberish, asset_out: AssetIdInput, amount_in_max: BigNumberish, pools: Vec<[AssetIdInput, AssetIdInput, boolean]>, recipient: IdentityInput, deadline: BigNumberish];
export type SwapExactOutputScriptOutput = Vec<[BN, AssetIdOutput]>;

export type SwapExactOutputScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, struct std::asset_id::AssetId)",
      "concreteTypeId": "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)>",
      "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378",
      "metadataTypeId": 11,
      "typeArguments": [
        "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
      ]
    },
    {
      "type": "struct std::vec::Vec<(u64, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "metadataTypeId": 11,
      "typeArguments": [
        "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 9
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "buf",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_out",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "amount_in_max",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "pools",
          "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 18192
    }
  ]
};

const bytecode = decompressBytecode('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');

export class SwapExactOutputScript extends Script<SwapExactOutputScriptInputs, SwapExactOutputScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
