/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type CreatePoolAndAddLiquidityScriptInputs = [token_0_contract_id: ContractIdInput, token_0_sub_id: string, token_1_contract_id: ContractIdInput, token_1_sub_id: string, is_stable: boolean, amount_0_desired: BigNumberish, amount_1_desired: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type CreatePoolAndAddLiquidityScriptOutput = AssetOutput;

export type CreatePoolAndAddLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 0
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 1
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 4
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "Address",
          "typeId": 2
        },
        {
          "name": "ContractId",
          "typeId": 4
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "id",
          "typeId": 3
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "token_0_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_0_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "token_1_contract_id",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "token_1_sub_id",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "is_stable",
          "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
        },
        {
          "name": "amount_0_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 8280
    }
  ]
};

const bytecode = decompressBytecode('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');

export class CreatePoolAndAddLiquidityScript extends Script<CreatePoolAndAddLiquidityScriptInputs, CreatePoolAndAddLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
