/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type CreatePoolAndAddLiquidityScriptInputs = [pool_id: [AssetIdInput, AssetIdInput, boolean], amount_0_desired: BigNumberish, amount_1_desired: BigNumberish, recipient: IdentityInput, deadline: BigNumberish];
export type CreatePoolAndAddLiquidityScriptOutput = AssetOutput;

export type CreatePoolAndAddLiquidityScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 3
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "concreteTypeId": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "metadataTypeId": 4
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 7
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 6
        },
        {
          "name": "__tuple_element",
          "typeId": 2
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "bool",
      "metadataTypeId": 2
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "Address",
          "typeId": 5
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct interfaces::data_structures::Asset",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "id",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "pool_id",
          "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
        },
        {
          "name": "amount_0_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "amount_1_desired",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "affa437f314a241a60e97d006b83a963a5eaf0e0185484335e9ed03cd078d7f8",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 8048
    }
  ]
};

const bytecode = decompressBytecode('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');

export class CreatePoolAndAddLiquidityScript extends Script<CreatePoolAndAddLiquidityScriptInputs, CreatePoolAndAddLiquidityScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
